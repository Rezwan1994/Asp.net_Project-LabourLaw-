using LLP.Entities;
using LLP.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Security;

namespace LLP.Web.Controllers
{
    public class HomeController : BaseController
    {
        public ActionResult Index()
        {
            return View();
        }
        [HttpGet]
        public ActionResult BookSearch()
        {
          
            return View();
        }
        [HttpPost]
        public ActionResult BookSearch(FormCollection Form)
        {
            TempData["value"] = Request["search"];
            if (TempData["value"].ToString().Length > 0)
                return RedirectToAction("Search", "Home");
            return View("Index");
        }
        public ActionResult list(string search)
        {
            List<string> allsearch = new List<string>();
            List<int> allid = new List<int>();
            allsearch = _Util.Facade.ChapterFacade.GetAllChapterName().Where(x => x.Name.Contains(search)).Select(x => x.Name).ToList();

            return new JsonResult { Data = allsearch, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        public ActionResult Search()
        {
           

            return View(_Util.Facade.ChapterFacade.GetAllChapterName());
        }

        public ActionResult Registration()
        {

            return View();
        }

        

        public ActionResult SaveUser(UserLogin Content)
        {

            bool result = false;
            try
            {
                if (Content.Id > 0)
                {
                    _Util.Facade.UserLoginFacade.UpdateUser(Content);

                }
                else
                {
                    _Util.Facade.UserLoginFacade.InsertUser(Content);
                  
                }
                result = true;
            }
            catch (Exception ex)
            {

            }

            BuildEmailTemplate(Content.Id);
            // return RedirectToAction("Dashboard");
            return Json(result);


        }
        public ActionResult Confirm()
        {
            if (Request.QueryString["regId"] != null)
            {
                EncryptionDeycryption salt = new EncryptionDeycryption();
                string code = HttpUtility.HtmlDecode(Request.QueryString["regId"].ToString());
                string result = DESEncryptionDecryption.DecryptCipherTextToPlainText(code);
         
                string[] resultsplit = result.Split('&');
                if (resultsplit.Length > 0)
                {
                    string userId = "";
                    string email = "";
                    for (int icount = 0; icount < resultsplit.Length; icount++)
                    {
                        if (resultsplit[icount].ToLower().IndexOf("userId") > -1)
                        {
                            userId = resultsplit[icount].ToLower().Replace("userId=", "");
                         
                        }
                        if (resultsplit[icount].ToLower().IndexOf("email") > -1)
                        {
                            email = resultsplit[icount].ToLower().Replace("email=", "");
                        }
                    }

                 
                }
                ViewBag.regID = result;

            }
          
            return View();
        }
 

        public JsonResult RegisterConfirm(int regId)
        {
            UserLogin Data = _Util.Facade.UserLoginFacade.GetAllUserName().Where(x => x.Id == regId).FirstOrDefault();
            Data.IsActive = true;
            _Util.Facade.UserLoginFacade.UpdateUser(Data);
            var msg = "Your Email Is Verified!";
            return Json(msg, JsonRequestBehavior.AllowGet);
        }
        public void BuildEmailTemplate(int regID)
        {
            string ActivationLink = "{0}##{1}";
     
            var regInfo = _Util.Facade.UserLoginFacade.GetAllUserName().Where(x => x.Id == regID).FirstOrDefault();

            EncryptionDeycryption salt = new EncryptionDeycryption();
             ActivationLink = string.Format("?regId={0}",
               HttpUtility.UrlEncode(
                    DESEncryptionDecryption.EncryptPlainTextToCipherText(string.Format(ActivationLink, regID, regInfo.EmailAddress))));
            if(regID>0)
            {
                VerifyEmail ver = new VerifyEmail();
                ver.Name = regInfo.UserName;
                ver.ToEmail = regInfo.EmailAddress;
                ver.EmailVerificationLink = "/Home/Confirm"+ActivationLink;
                _Util.Facade.MailFacade.SendEmailVerify(ver);
            }
        
        
        }

        //public void BuildEmailTemplate(string subjectText, string bodyText, string sendTo)
        //{
        //    string from, to, bcc, cc, subject, body;
        //    from = "YourEmail@gmail.com";
        //    to = sendTo.Trim();
        //    bcc = "";
        //    cc = "";
        //    subject = subjectText;
        //    StringBuilder sb = new StringBuilder();
        //    sb.Append(bodyText);
        //    body = sb.ToString();
        //    MailMessage mail = new MailMessage();
        //    mail.From = new MailAddress(from);
        //    mail.To.Add(new MailAddress(to));
        //    if (!string.IsNullOrEmpty(bcc))
        //    {
        //        mail.Bcc.Add(new MailAddress(bcc));
        //    }
        //    if (!string.IsNullOrEmpty(cc))
        //    {
        //        mail.CC.Add(new MailAddress(cc));
        //    }
        //    mail.Subject = subject;
        //    mail.Body = body;
        //    mail.IsBodyHtml = true;
        //    SendEmail(mail);
        //}

        public JsonResult Login_By_Fb(UserLogin content)
        {
            bool result = false;
            string msg = "";
            try
            {
                //email query 
                UserLogin user = _Util.Facade.UserLoginFacade.GetUserEmail(content.EmailAddress);
                if (user != null)
                {
                    _Util.Facade.UserLoginFacade.UpdateUser(content);
                    if(user.IsActive == false)
                    {
                        result = false;
                        msg = "Invalid User. Please contact with administration...";
                    }
                    else
                    {
                        result = true;
                    }
                    
                }
                else
                {
                   result =  _Util.Facade.UserLoginFacade.InsertUser(content);
                    
                }
                //if no record insert and return true// password// email send with new and congration. 
                //if record with active status return true
                //if record with non activ status retur false
         
                Session["UserName"] = content.UserName;
            
            }
            catch (Exception ex)
            {

            }
            return Json(new { result = result, msg = msg });
        }
        //public static void SendEmail(MailMessage mail)
        //{
        //    SmtpClient client = new SmtpClient();
        //    client.Host = "smtp.gmail.com";
        //    client.Port = 587;
        //    client.EnableSsl = true;
        //    client.UseDefaultCredentials = false;
        //    client.DeliveryMethod = SmtpDeliveryMethod.Network;
        //    client.Credentials = new System.Net.NetworkCredential("rezwan.aiub10@gmail.com", "Rezwan10");
        //    try
        //    {
        //        client.Send(mail);
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        public ActionResult SearchInbook(string search)
        {
            List<string> searchtitle = new List<string>();
            searchtitle = _Util.Facade.ChapterContentFacade.GetAllChapterName().Where(x=>x.CpContent.ToLower().Contains(search.ToLower())).Select(x=>x.Title).ToList();


            return new JsonResult { Data = searchtitle, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
        }

        public ActionResult ShowContentbyTitle(string  title)
        {
           
            ChapterContent coo = new ChapterContent();
            foreach(ChapterContent cp in _Util.Facade.ChapterContentFacade.GetAllChapterName())
             {
                if(cp.Title == title)
                {
                    coo = cp;
                }
               
            }
            return View(coo);

        }

    }
}